/*
 * MIT License
 *
 * Copyright (C) 2023 Huawei Device Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */

#include "RNCFastImageViewTurboModule.h"
#include "RNOH/ArkTSTurboModule.h"
#include "RNOH/RNInstanceCAPI.h"
#include "downloadUtils/DownloadUri.h"
#include "downloadUtils/HttpTaskProcessor.h"
#include <filesystem>

using namespace rnoh;
using namespace facebook;
namespace fs = std::filesystem;

static jsi::Value hostFunction_RNCFastImageViewTurboModule_preload(jsi::Runtime &rt, react::TurboModule &turboModule,
                                                                   const jsi::Value *args, size_t count) {
    auto self = static_cast<RNCFastImageViewTurboModule *>(&turboModule);
    self->preload(rt, args, count);
    return jsi::Value::null();
}
void RNCFastImageViewTurboModule::preload(facebook::jsi::Runtime &rt, const facebook::jsi::Value *args, size_t count) {
    if(count == 0)
        return;
    
    facebook::jsi::Array sources = args[0].asObject(rt).asArray(rt);
    for (int i = 0; i < sources.size(rt); i++) {
        auto value = sources.getValueAtIndex(rt, i);
        if (!value.isObject())
            continue;
        auto source = value.getObject(rt);
        if (source.hasProperty(rt, "uri")) {
            std::string uri = source.getProperty(rt, "uri").toString(rt).utf8(rt);
            //磁盘有无缓存文件，有则不执行
            DownloadUri utils;
            std::string fileUri = utils.getUri(uri);
            bool diskCache = m_FastImageSourceResolver->remoteImageSourceMap.get(fileUri);
            if (!diskCache) {
                m_FastImageSourceResolver->pendingSet.insert(fileUri);
            } else {
                return;
            }
            
            fileUri = fileCacheDir + fileUri;
            std::map<std::string, std::string> headersData;
            if (source.hasProperty(rt, "headers")) {
                auto headers = source.getProperty(rt, "headers").asObject(rt);
                headers.asHostObject(rt)->getPropertyNames(rt);
                auto props = source.getProperty(rt, "headers").asObject(rt).getPropertyNames(rt);
                int propsSize = props.size(rt);
                for (int i =0; i<propsSize; i++) {
                    auto headersKey = props.getValueAtIndex(rt, i).asString(rt);
                    headersData.insert({
                        headersKey.utf8(rt),
                        headers.getProperty(rt, headersKey).asString(rt).utf8(rt)
                    });
                }
            }
                
            preload(uri,fileUri,headersData);
        }
    }
    return;
}

void RNCFastImageViewTurboModule::preload(std::string uri,std::string fileUri,const std::map<std::string, std::string>& headers){
    HttpTaskProcessor* processor = new HttpTaskProcessor();
    processor->instance = m_FastImageSourceResolver;
    processor->filePath_ = fileUri;
    if (headers.size() == 0)  {
        processor->launchHttpRequest(uri.c_str());
    } else {
        processor->launchHttpRequest(uri.c_str(),headers);
    }
}

static jsi::Value hostFunction_RNCFastImageViewTurboModule_clearMemoryCache(jsi::Runtime &rt,
                                                                            react::TurboModule &turboModule,
                                                                            const jsi::Value *args, size_t count) {
    auto self = static_cast<RNCFastImageViewTurboModule *>(&turboModule);
    return jsi::Value(self->clearMemoryCache());
}

bool RNCFastImageViewTurboModule::clearMemoryCache() {
    return true;
}

static jsi::Value hostFunction_RNCFastImageViewTurboModule_clearDiskCache(jsi::Runtime &rt,
                                                                          react::TurboModule &turboModule,
                                                                          const jsi::Value *args, size_t count) {
    auto self = static_cast<RNCFastImageViewTurboModule *>(&turboModule);
    return jsi::Value(self->clearDiskCache());
}

bool RNCFastImageViewTurboModule::clearDiskCache() {
    return this->m_FastImageSourceResolver->remoteImageSourceMap.clearAll();
}

RNCFastImageViewTurboModule::RNCFastImageViewTurboModule(const ArkTSTurboModule::Context ctx, const std::string name)
    : ArkTSTurboModule(ctx, name) {
    methodMap_["preload"] = MethodMetadata{0, hostFunction_RNCFastImageViewTurboModule_preload};
    methodMap_["clearMemoryCache"] = MethodMetadata{0, hostFunction_RNCFastImageViewTurboModule_clearMemoryCache};
    methodMap_["clearDiskCache"] = MethodMetadata{0, hostFunction_RNCFastImageViewTurboModule_clearDiskCache};
    
    auto cache = this->callSync("getCacheDir", {});
    fileCacheDir = cache.asString()+"/";
    m_FastImageSourceResolver =  std::make_shared<FastImageSourceResolver>(fileCacheDir);
    
    fs::path directoryPath = fileCacheDir;
    if (fs::exists(directoryPath) && fs::is_directory(directoryPath)) {
        for (const auto& entry : fs::directory_iterator(directoryPath)) {
            if (fs::is_regular_file(entry.path())) {
                m_FastImageSourceResolver->remoteImageSourceMap.put(entry.path().filename(),true);
            }
        }
    }
}