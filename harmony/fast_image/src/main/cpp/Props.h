/*
 * Copyright (c) 2024 Huawei Device Co., Ltd. All rights reserved
 * Use of this source code is governed by a MIT license that can be
 * found in the LICENSE file.
 */

/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <jsi/jsi.h>
#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>
#include <react/renderer/graphics/Color.h>
#include <vector>
#include <react/renderer/imagemanager/primitives.h>

namespace facebook {
namespace react {

enum class FastImageViewPriority { Low, Normal, High };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, FastImageViewPriority &result) {
  auto string = (std::string)value;
  if (string == "low") { result = FastImageViewPriority::Low; return; }
  if (string == "normal") { result = FastImageViewPriority::Normal; return; }
  if (string == "high") { result = FastImageViewPriority::High; return; }
  abort();
}

static inline std::string toString(const FastImageViewPriority &value) {
  switch (value) {
    case FastImageViewPriority::Low: return "low";
    case FastImageViewPriority::Normal: return "normal";
    case FastImageViewPriority::High: return "high";
  }
}

enum class FastImageViewCache { Immutable, Web, CacheOnly };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, FastImageViewCache &result) {
  auto string = (std::string)value;
  if (string == "immutable") { result = FastImageViewCache::Immutable; return; }
  if (string == "web") { result = FastImageViewCache::Web; return; }
  if (string == "cacheOnly") { result = FastImageViewCache::CacheOnly; return; }
  abort();
}

static inline std::string toString(const FastImageViewCache &value) {
  switch (value) {
    case FastImageViewCache::Immutable: return "immutable";
    case FastImageViewCache::Web: return "web";
    case FastImageViewCache::CacheOnly: return "cacheOnly";
  }
}
enum class FastImageViewResizeMode { Contain, Cover, Stretch, Center };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, FastImageViewResizeMode &result) {
  auto string = (std::string)value;
  if (string == "contain") { result =FastImageViewResizeMode::Contain; return; }
  if (string == "cover") { result = FastImageViewResizeMode::Cover; return; }
  if (string == "stretch") { result = FastImageViewResizeMode::Stretch; return; }
  if (string == "center") { result = FastImageViewResizeMode::Center; return; }
  abort();
}

static inline std::string toString(const FastImageViewResizeMode &value) {
  switch (value) {
    case FastImageViewResizeMode::Contain: return "contain";
    case FastImageViewResizeMode::Cover: return "cover";
    case FastImageViewResizeMode::Stretch: return "stretch";
    case FastImageViewResizeMode::Center: return "center";
  }
}
struct FastImageViewSourceHeadersStruct {
  std::string name;
  std::string value;
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, FastImageViewSourceHeadersStruct &result) {
  auto map = (butter::map<std::string, RawValue>)value;

  auto tmp_name = map.find("name");
  if (tmp_name != map.end()) {
    fromRawValue(context, tmp_name->second, result.name);
  }
  auto tmp_value = map.find("value");
  if (tmp_value != map.end()) {
    fromRawValue(context, tmp_value->second, result.value);
  }
}

static inline std::string toString(const FastImageViewSourceHeadersStruct &value) {
  return "[Object FastImageViewSourceHeadersStruct]";
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<FastImageViewSourceHeadersStruct> &result) {
  auto items = (std::vector<RawValue>)value;
  for (const auto &item : items) {
    FastImageViewSourceHeadersStruct newItem;
    fromRawValue(context, item, newItem);
    result.emplace_back(newItem);
  }
}


struct FastImageViewSourceStruct {
  std::string uri;
  std::vector<FastImageViewSourceHeadersStruct> headers;
  FastImageViewPriority priority;
  FastImageViewCache cache;
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, FastImageViewSourceStruct &result) {
  auto map = (butter::map<std::string, RawValue>)value;

  auto tmp_uri = map.find("uri");
  if (tmp_uri != map.end()) {
    fromRawValue(context, tmp_uri->second, result.uri);
  }
  auto tmp_headers = map.find("headers");
  if (tmp_headers != map.end()) {
    fromRawValue(context, tmp_headers->second, result.headers);
  }
  auto tmp_priority = map.find("priority");
  if (tmp_priority != map.end()) {
    fromRawValue(context, tmp_priority->second, result.priority);
  }
  auto tmp_cache = map.find("cache");
  if (tmp_cache != map.end()) {
    fromRawValue(context, tmp_cache->second, result.cache);
  }
}

static inline std::string toString(const FastImageViewSourceStruct &value) {
  return "[Object FastImageViewSourceStruct]";
}
class JSI_EXPORT FastImageViewProps final : public ViewProps {
 public:
  FastImageViewProps() = default;
  FastImageViewProps(const PropsParserContext& context, const FastImageViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  FastImageViewSourceStruct source{};
  std::string defaultSource{};
  FastImageViewResizeMode resizeMode{FastImageViewResizeMode::Cover};
  SharedColor tintColor{};
};

} // namespace react
} // namespace facebook
